ext.libraries = [
        jaxb                    : [
                dependencies.create("javax.xml.bind:jaxb-api") {
                    force = true
                    transitive = false
                },
                dependencies.create("javax.xml.ws:jaxws-api") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.main.javaee-api:javax.jws") {
                    force = true
                    transitive = false
                },
                dependencies.create("javax.xml.soap:javax.xml.soap-api") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.jaxb:jaxb-runtime") {
                    force = true
                    transitive = false
                },
                dependencies.create("org.glassfish.jaxb:jaxb-core") {
                    force = true
                }
        ],
        aspectj                 : [
                dependencies.create("org.aspectj:aspectjrt") {
                    force = true
                },
                dependencies.create("org.aspectj:aspectjweaver") {
                    force = true
                }
        ],
        swagger                 : [
                dependencies.create("io.swagger:swagger-annotations") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                },
                dependencies.create("io.swagger:swagger-core") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                },
                dependencies.create("io.swagger:swagger-jaxrs") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                },
                dependencies.create("io.swagger:swagger-models") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                }
        ],
        swaggerfox              : [
                dependencies.create("io.springfox:springfox-swagger2") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    exclude(group: "io.swagger", module: "swagger-annotations")
                    exclude(group: "io.swagger", module: "swagger-core")
                    exclude(group: "io.swagger", module: "swagger-models")
                    exclude(group: "io.swagger", module: "swagger-jaxrs")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                }
        ],
        swaggerui               : [
                dependencies.create("io.springfox:springfox-swagger-ui") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    exclude(group: "javax.validation", module: "validation-api")
                    force = true
                }
        ],
        bouncycastle            : [
                dependencies.create("org.bouncycastle:bcpkix-jdk15on") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.cryptacular:cryptacular") {
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.bouncycastle:bcprov-jdk15on") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                }
        ],

        casclient               : dependencies.create("org.jasig.cas.client:cas-client-core") {
            exclude(group: "javax.servlet", module: "servlet-api")
            exclude(group: "org.slf4j", module: "log4j-over-slf4j")
            exclude(group: "org.bouncycastle", module: "bcprov-jdk15")
            exclude(group: "org.slf4j", module: "slf4j-api")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
            force = true
        },
        cassecurityfilter       : dependencies.create("org.apereo.cas:cas-server-security-filter") {
            force = true
        },
        commons                 : [
                dependencies.create("commons-io:commons-io") {
                    force = true
                },
                dependencies.create("org.apache.commons:commons-text") {
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    force = true
                },
                dependencies.create("org.apache.commons:commons-pool2") {
                    force = true
                },
                dependencies.create("commons-cli:commons-cli") {
                    force = true
                },
                dependencies.create("commons-beanutils:commons-beanutils") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    force = true
                },
                dependencies.create("commons-logging:commons-logging") {
                    force = true
                },
                dependencies.create("org.apache.commons:commons-configuration2") {
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    force = true
                },
                dependencies.create("commons-validator:commons-validator") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "commons-beanutils", module: "commons-beanutils")
                    exclude(group: "commons-digester", module: "commons-digester")
                    force = true
                },
                dependencies.create("commons-codec:commons-codec") {
                    force = true
                },
                dependencies.create("commons-jexl:commons-jexl") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "junit", module: "junit")
                    force = true
                },
                dependencies.create("org.apache.commons:commons-lang3") {
                    force = true
                },
                dependencies.create("commons-lang:commons-lang:2.6") {
                    force = true
                },
                dependencies.create("org.jooq:jool") {
                    force = true
                },
                dependencies.create("com.github.lalyos:jfiglet") {
                    force = true
                },
                dependencies.create("commons-collections:commons-collections") {
                    force = true
                },
                dependencies.create("org.apache.commons:commons-collections4") {
                    force = true
                }
        ],
        findbugscontrib         : dependencies.create("com.mebigfatguy.fb-contrib:fb-contrib") {
            force = true
        },
        findbugs                : dependencies.create("com.github.spotbugs:spotbugs") {
            force = true
        },
        findbugsannotations     : dependencies.create("com.github.spotbugs:spotbugs-annotations") {
            force = true
        },
        findbugssec             : dependencies.create("com.h3xstream.findsecbugs:findsecbugs-plugin") {
            force = true
        },
        groovy                  : [
                dependencies.create("org.codehaus.groovy:groovy-jsr223") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-console") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-json") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-xml") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-datetime") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    force = true
                },
                dependencies.create("org.codehaus.groovy:groovy-groovysh") {
                    force = true
                }
        ],

        guava                   : [
                dependencies.create("com.google.guava:guava") {
                    force = true
                },
                dependencies.create("org.reflections:reflections") {
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.javassist", module: "javassist")
                    force = true
                },
                dependencies.create("org.javassist:javassist") {
                    force = true
                },
                dependencies.create("org.springmodules:spring-modules-cache:0.8") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "ant", module: "ant")
                    exclude(group: "xstream", module: "xstream")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "xpp3", module: "xpp3_min")
                    exclude(group: "jcs", module: "jcs")
                    exclude(group: "jboss", module: "jboss-system")
                    exclude(group: "jboss", module: "javassist")
                    exclude(group: "jboss", module: "jboss-cache")
                    exclude(group: "jboss", module: "jboss-jmx")
                    exclude(group: "jboss", module: "jboss-minimal")
                    exclude(group: "jboss", module: "jboss-common")
                    exclude(group: "jgroups", module: "jgroups-all")
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "xjavadoc", module: "xjavadoc")
                    exclude(group: "jini", module: "xjavadoc")
                    exclude(group: "jini", module: "jsk-platform")
                    exclude(group: "jini", module: "boot")
                    exclude(group: "jini", module: "jsk-lib")
                    exclude(group: "jini", module: "mahalo")
                    exclude(group: "jini", module: "reggie")
                    exclude(group: "jini", module: "start")
                    exclude(group: "jini", module: "webster")
                    exclude(group: "ehcache", module: "ehcache")
                    exclude(group: "gigaspaces", module: "gigaspaces-ce")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.springframework", module: "spring")
                    force = true
                }
        ],
        javax                   : [
                dependencies.create("javax.servlet:javax.servlet-api:$javaxServletVersion") {
                    force = true
                }
        ],
        javaximpl               : [
                dependencies.create("javax.servlet:jstl:$javaxJstlVersion"),
                dependencies.create("javax.transaction:jta:$jtaVersion")
        ],
        thymeleafdialect        : [
                dependencies.create("nz.net.ultraq.thymeleaf:thymeleaf-layout-dialect") {
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.codehaus.groovy", module: "groovy")
                    exclude(group: "org.thymeleaf", module: "thymeleaf")
                    force = true
                }
        ],
        thymeleaf               : [
                dependencies.create("org.thymeleaf:thymeleaf-spring5") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.javassist", module: "javassist")
                    exclude(group: "org.sourceforge.nekohtml", module: "nekohtml")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-thymeleaf") {
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "ch.qos.logback", module: "logback-core")
                    exclude(group: "ch.qos.logback", module: "logback-classic")
                    exclude(group: "nz.net.ultraq.thymeleaf", module: "thymeleaf-layout-dialect")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.sourceforge.nekohtml", module: "nekohtml")
                    force = true
                }
        ],
        tests                   : [
                dependencies.create("com.github.kstyrc:embedded-redis") {
                    exclude(module: "commons-io")
                    force = true
                },
                dependencies.create("org.mockito:mockito-core") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "net.bytebuddy", module: "byte-buddy")
                    exclude(group: "junit", module: "junit")
                    force = true
                },
                dependencies.create("org.objenesis:objenesis") {
                    exclude(group: "org.mockito", module: "mockito-all")
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-api") {
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-engine") {
                    force = true
                },
                dependencies.create("org.junit.jupiter:junit-jupiter-params") {
                    force = true
                },
                dependencies.create("org.junit.vintage:junit-vintage-engine") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-engine") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-suite-api") {
                    force = true
                },
                dependencies.create("org.junit.platform:junit-platform-launcher") {
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-test") {
                    exclude(group: "org.hamcrest", module: "hamcrest-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.objenesis", module: "objenesis")
                    exclude(group: "org.springframework", module: "spring-test")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.skyscreamer", module: "jsonassert")
                    exclude(group: "org.ow2.asm", module: "asm")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-all")
                    exclude(group: "org.mockito", module: "mockito-core")
                    force = true
                },
                dependencies.create("org.hsqldb:hsqldb"),
                dependencies.create("org.skyscreamer:jsonassert") {
                    exclude(group: "org.json", module: "json")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("org.springframework:spring-test") {
                    exclude(group: "junit", module: "junit")
                    force = true
                },
                dependencies.create("org.json:json") {
                    force = true
                }
        ],
        pac4j                   : [
                dependencies.create("org.pac4j:pac4j-cas:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-config:$pac4jVersion") {
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-httpclient", module: "commons-httpclient")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "net.shibboleth.ext", module: "spring-extensions")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.opensaml", module: "xmltooling")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-core:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    exclude(group: "com.zaxxer", module: "HikariCP")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-http:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-core")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-jwt:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "commons-io", module: "commons-io")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-oidc:$pac4jVersion") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-mongo:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-oauth:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.apache.commons", module: "commons-codec")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "com.nimbusds", module: "oauth2-oidc-sdk")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    force = true
                },
                dependencies.create("org.pac4j:pac4j-saml:$pac4jVersion") {
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.apache.velocity", module: "velocity")
                    exclude(group: "commons-lang", module: "commons-lang")
                    exclude(group: "com.google.guava", module: "guava")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient")
                    exclude(group: "org.apache.httpcomponents", module: "httpclient-cache")
                    exclude(group: "commons-httpclient", module: "commons-httpclient")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.opensaml", module: "opensaml-core")
                    exclude(group: "net.shibboleth.utilities", module: "java-support")
                    exclude(group: "org.opensaml", module: "opensaml-saml-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-impl")
                    exclude(group: "org.opensaml", module: "opensaml-profile-api")
                    exclude(group: "org.opensaml", module: "opensaml-profile-impl")
                    exclude(group: "org.opensaml", module: "opensaml-soap-api")
                    exclude(group: "org.opensaml", module: "opensaml-security-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-api")
                    exclude(group: "org.opensaml", module: "opensaml-messaging-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-impl")
                    exclude(group: "org.opensaml", module: "opensaml-xmlsec-saml-impl")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "net.shibboleth.ext", module: "spring-extensions")
                    exclude(group: "org.opensaml", module: "opensaml-saml-api")
                    exclude(group: "xml-apis", module: "xml-apis")
                    exclude(group: "org.opensaml", module: "xmltooling")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    force = true
                },
                dependencies.create("org.pac4j:spring-webmvc-pac4j:$pac4jSpringWebmvcVersion") {
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.pac4j", module: "pac4j-core")
                    exclude(group: "joda-time", module: "joda-time")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("com.nimbusds:nimbus-jose-jwt") {
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("com.nimbusds:oauth2-oidc-sdk") {
                    exclude(group: "net.minidev", module: "json-smart")
                    exclude(group: "com.nimbusds", module: "nimbus-jose-jwt")
                    exclude(group: "org.apache.commons", module: "commons-lang3")
                    exclude(group: "commons-collections", module: "commons-collections")
                    force = true
                },
                dependencies.create("net.minidev:json-smart") {
                    force = true
                }
        ],
        pac4jCouchDb             : dependencies.create("org.pac4j:pac4j-couch") {
            exclude(group: "org.pac4j", module: "pac4j-core")
            exclude(group: "org.ektorp", module: "org.ektorp")
            exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
        },
        springcomponentindexer  : [
                dependencies.create("org.springframework:spring-context-indexer:$springVersion") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                }
        ],
        springbootconfigmetadata: [
                dependencies.create("org.springframework.boot:spring-boot-configuration-processor") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "org.json", module: "json")
                    exclude(group: "commons-cli", module: "commons-cli")
                },
                dependencies.create("org.json:json") {
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-configuration-metadata") {
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("com.github.javaparser:javaparser-core") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.google.guava", module: "guava")
                    force = true
                }

        ],
        springboot              : [
                dependencies.create("org.springframework.boot:spring-boot-starter-websocket") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-messaging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-mail") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-context-support")
                    exclude(group: "org.springframework", module: "spring-beans")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-web") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "log4j-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.jboss.logging", module: "jboss-logging")
                    exclude(group: "com.fasterxml", module: "classmate")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-core")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-el")
                    exclude(group: "org.apache.tomcat.embed", module: "tomcat-embed-websocket")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-tomcat")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-autoconfigure") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-actuator")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-devtools") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-properties-migrator") {
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    exclude(group: "com.vaadin.external.google", module: "android-json")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-log4j2") {
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-slf4j-impl")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-core")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-api")
                    exclude(group: "org.apache.logging.log4j", module: "log4j-jcl")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-starter-actuator") {
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-web")
                    exclude(group: "org.springframework.boot", module: "spring-boot-starter-logging")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.hibernate", module: "hibernate-validator")
                    exclude(group: "org.hibernate", module: "hibernate-core")
                    exclude(group: "org.hibernate", module: "hibernate-entitymanager")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jul-to-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.boot:spring-boot-actuator") {
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-annotations")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springboottomcat        : [
                dependencies.create("org.springframework.boot:spring-boot-starter-tomcat") {
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude group: 'org.slf4j', module: 'slf4j'
                    exclude group: 'org.slf4j', module: 'slf4j-api'
                    exclude group: 'org.apache.commons', module: 'commons-lang3'
                    force = true
                },
                dependencies.create("org.apache.tomcat.embed:tomcat-embed-jasper") {
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude group: 'org.slf4j', module: 'slf4j'
                    exclude group: 'org.slf4j', module: 'slf4j-api'
                    exclude group: 'org.apache.commons', module: 'commons-lang3'
                    force = true
                },
                dependencies.create("org.apache.tomcat:tomcat-catalina-ha") {
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude group: 'org.slf4j', module: 'slf4j'
                    exclude group: 'org.slf4j', module: 'slf4j-api'
                    exclude group: 'org.apache.commons', module: 'commons-lang3'
                    force = true
                }
        ],
        spring                  : [
                dependencies.create("org.springframework:spring-aop") {
                    force = true
                },
                dependencies.create("org.springframework:spring-beans") {
                    force = true
                },
                dependencies.create("org.springframework.webflow:spring-binding") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.springframework:spring-context") {
                    force = true
                },
                dependencies.create("org.springframework:spring-context-support") {
                    force = true
                },
                dependencies.create("org.springframework:spring-core") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    force = true
                },
                dependencies.create("org.springframework.data:spring-data-mongodb") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework.data", module: "spring-data-commons")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    force = true
                },
                dependencies.create("org.springframework.data:spring-data-commons") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "org.mongodb", module: "mongo-java-driver")
                    force = true
                },

                dependencies.create("org.springframework:spring-jms") {
                    exclude(group: "org.springframework", module: "spring-messaging")
                    force = true
                },
                dependencies.create("org.springframework:spring-messaging") {
                    force = true
                },
                dependencies.create("org.springframework:spring-expression") {
                    force = true
                },
                dependencies.create("org.springframework:spring-jdbc") {
                    force = true
                },
                dependencies.create("org.springframework:spring-orm"),
                dependencies.create("org.springframework:spring-tx") {
                    force = true
                },
                dependencies.create("org.springframework:spring-web") {
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    force = true
                },
                dependencies.create("org.springframework.webflow:spring-webflow") {
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-webmvc")
                    force = true
                },
                dependencies.create("org.apereo:spring-webflow-client-repo") {
                    exclude(group: "log4j", module: "log4j")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    exclude(group: "org.slf4j", module: "slf4j-log4j12")
                    exclude(group: "org.springframework.webflow", module: "spring-webflow")
                    exclude(group: "commons-codec", module: "commons-codec")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.slf4j", module: "jcl-over-slf4j")
                    exclude(group: "org.cryptacular", module: "cryptacular")
                    exclude(group: "org.bouncycastle", module: "bcprov-jdk15on")
                    exclude(group: "org.bouncycastle", module: "bcpkix-jdk15on")
                    force = true
                },
                dependencies.create("org.springframework:spring-webmvc") {
                    force = true
                }
        ],

        springsecurityconfig    : [
                dependencies.create("org.springframework.security:spring-security-config") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "commons-cli", module: "commons-cli")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springsecurityweb       : [
                dependencies.create("org.springframework.security:spring-security-web") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-web")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                }
        ],
        springsecurity          : [
                dependencies.create("org.springframework.security:spring-security-core") {
                    exclude(group: "aopalliance", module: "aopalliance")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "commons-logging", module: "commons-logging")
                    exclude(group: "javax.annotation", module: "jsr250-api")
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.aspectj", module: "aspectjrt")
                    exclude(group: "org.slf4j", module: "slf4j-api")
                    force = true
                },
                dependencies.create("org.springframework.security:spring-security-rsa") {
                    force = true
                },
                dependencies.create("org.springframework.security:spring-security-cas") {
                    exclude(group: "net.sf.ehcache", module: "ehcache")
                    exclude(group: "org.jasig.cas.client", module: "cas-client-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-test")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-core")
                    force = true
                },
                dependencies.create("org.springframework.security:spring-security-openid") {
                    exclude(group: "org.jasig.cas.client", module: "cas-client-core")
                    exclude(group: "org.springframework", module: "spring-aop")
                    exclude(group: "org.springframework", module: "spring-beans")
                    exclude(group: "org.springframework", module: "spring-context")
                    exclude(group: "org.springframework", module: "spring-core")
                    exclude(group: "org.springframework", module: "spring-expression")
                    exclude(group: "org.springframework", module: "spring-jdbc")
                    exclude(group: "org.springframework", module: "spring-test")
                    exclude(group: "org.springframework", module: "spring-tx")
                    exclude(group: "com.fasterxml.jackson.core", module: "jackson-databind")
                    exclude(group: "junit", module: "junit")
                    exclude(group: "org.mockito", module: "mockito-core")
                    force = true
                }
        ],
        casServer              : [
                init                 : [
                    dependencies.create("org.apereo.cas:cas-server-support-person-directory") {
                        force = true
                    },
                    dependencies.create("org.apereo.cas:cas-server-support-discovery-profile") {
                        transitive = false
                        force = true
                    },
                    dependencies.create("org.apereo.cas:cas-server-core-util") {
                        force = true
                    }
                ],
                configuration        : [
                    dependencies.create("org.apereo.cas:cas-server-core-api-configuration-model") {
                        force = true
                    },
                    dependencies.create("org.apereo.cas:cas-server-core-util-api") {
                        force = true
                    }
                ],
                core                 : [
                    dependencies.create("org.apereo.cas:cas-server-core-services-api") {
                        force = true
                    },
                    dependencies.create("org.apereo.cas:cas-server-core-util-api") {
                        force = true
                    },
                    dependencies.create("org.apereo.cas:cas-server-support-ws-idp-api") {
                        force = true
                    }, 
                    dependencies.create("org.apereo.cas:cas-server-support-grouper-core") {
                        force = true
                    },
                    dependencies.create ("org.apereo.cas:cas-server-support-oidc-services") {
                        force = true
                    },
                    dependencies.create("org.apereo.cas:cas-server-support-oidc-core") {
                        force = true
                    }
                ],
                versionControl       : [
                        dependencies.create("org.apereo.cas:cas-server-support-json-service-registry") {
                            force = true;
                        }
                ]
        ],
        validationapi           : dependencies.create("javax.validation:validation-api:$javaxValidationVersion"),
        xmlapis                 : dependencies.create("xml-apis:xml-apis") {
            force = true
        },
        git                   :
                dependencies.create("org.eclipse.jgit:org.eclipse.jgit:$jgitVersion") {
                    exclude group: 'org.apache.httpcomponents', module: 'httpclient'
                    exclude group: 'org.slf4j', module: 'slf4j'
                    exclude group: 'org.slf4j', module: 'slf4j-api'
                    exclude group: 'org.apache.commons', module: 'commons-lang3'
                },
        lucene                 : [
                dependencies.create("org.apache.lucene:lucene-core:7.5.0"),
                dependencies.create("org.apache.lucene:lucene-queryparser:7.5.0"),
                dependencies.create("org.apache.lucene:lucene-analyzers-common:7.5.0")
        ]
]
