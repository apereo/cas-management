apply plugin: "war"
apply plugin: "org.springframework.boot"
apply plugin: "com.moowork.node"

description = "Apereo CAS Management Web Application"
def MAIN_CLASS = "org.apereo.cas.mgmt.web.CasManagementWebApplication"

javadoc {
    enabled false
}

node {
    version = "${nodeVersion}"
    nodeModulesDir = file("./")
    download = true
}

npm_install.enabled = !Boolean.getBoolean("skipNpmCache")

task buildClientDev(type: NpmTask, dependsOn: "npm_install", group: "bootRun",
        description: "Compile client side folder for development") {
    args = ['run', 'buildDev', mgmtUrl]
    enabled = !Boolean.getBoolean("skipClientBuild")
}

task buildClient(type: NpmTask, dependsOn: "npm_install", group: "build",
        description: "Compile client side folder for production") {
    args = ['run', 'build', mgmtUrl]
    enabled = !Boolean.getBoolean("skipClientBuild")
}

task buildClientWatch(type: NpmTask, dependsOn: "npm_install", group: "application", description: "Build and watches the client side assets for rebuilding") {
    args = ['run', 'buildWatch', mgmtUrl]
    enabled = !Boolean.getBoolean("skipClientBuild")
}

task ngLint(type: NpmTask, dependsOn: "npm_install", group: "check",
        description: "Runs Angular TypeScript and HtML Linting") {
    args = ['run', 'lint']
}

if (!rootProject.publishingRelease && !Boolean.getBoolean("skipNpmLint")) {
    check.dependsOn(ngLint)
}

bootRun {
    systemProperties = System.properties
    def list = []
    if (rootProject.enableRemoteDebugging) {
        list.add("-Xrunjdwp:transport=dt_socket,address=5006,server=y,suspend=n")
    }

    jvmArgs = list
    list.add("-XX:TieredStopAtLevel=1")
    list.add("-Xverify:none")
    dependsOn(buildClientDev)
}

springBoot {
    mainClass = MAIN_CLASS
}

bootRepackage {
    mainClass = MAIN_CLASS
    enabled = !rootProject.publishingRelease

    if (rootProject.publishReleases || Boolean.getBoolean("buildProd")) {
        dependsOn(buildClient)
    } else {
        dependsOn(buildClientDev)
    }
}

war {
    def currentTime = java.time.ZonedDateTime.now()

    manifest {
        attributes("Implementation-Title": project.name,
                "Implementation-Vendor": project.group,
                "Created-By": project.group,
                "Implementation-Date": currentTime,
                "Specification-Version": rootProject.currentRevision,
                "Implementation-Version": project.version)
    }
    enabled = !rootProject.publishingRelease && !rootProject.publishSnapshots

    if (rootProject.publishReleases || Boolean.getBoolean("buildProd")) {
        dependsOn(buildClient)
    } else {
        dependsOn(buildClientDev)
    }
}

task angularTest(type: NpmTask, dependsOn: 'npm_install', group: 'test', description: "Run Angular unit tests") {
    args = ['run', 'testSingleRun']
}

dependencies {
    runtimeOnly project(":webapp-mgmt:cas-management-webapp-configuration")
    runtimeOnly project(":webapp-mgmt:cas-management-webapp-support")

    providedRuntime libraries.springboottomcat
}
